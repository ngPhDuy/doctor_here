const { sequelize, WeeklyWork, Timeslot } = require("../models");
const { Op } = require("sequelize");

// CREATE TABLE "Ca_lam_viec_trong_tuan" (
//     "id" INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE NOT NULL,
//     "ma_bac_si" varchar(9),
//     "thu" VARCHAR(10), --Thứ 2, Thứ 3, Thứ 4, Thứ 5, Thứ 6, Thứ 7, Chủ nhật
//     "gio_bat_dau" time,
//     "gio_ket_thuc" time,
//     "lam_viec_onl" BOOLEAN,
//     "cap_nhat_luc" TIMESTAMP,
//     "hieu_luc" BOOLEAN,--Đang hiệu lực hoặc chờ có hiệu lực
//     "het_hieu_luc" BOOLEAN,
//     "gia_tien" INTEGER,
//     PRIMARY KEY ("id")
//   );

//   CREATE TABLE "Gio_hen" (
//     "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
//     "thoi_diem_bat_dau" TIMESTAMP UNIQUE,
//     "thoi_diem_ket_thuc" TIMESTAMP,
//     "ngay_lam_viec" DATE,
//     "available" BOOLEAN,
//     "id_ca_lam_viec" INTEGER,
//     PRIMARY KEY ("id")
//   );
// startTime and endTime are in format 'YYYY-MM-DDTHH:mm:ss'
exports.getTimeslots = async (drID, isOnlMethod, startTime, endTime) => {
  if (!drID || !isOnlMethod || !startTime || !endTime) {
    throw new Error("Thiếu tham số đầu vào");
  }
  // Chuyển endTime về cuối ngày
  startTime = new Date();
  endTime = new Date(endTime).setHours(23, 59, 59, 999);

  let queryResult = await WeeklyWork.findAll({
    where: {
      ma_bac_si: drID,
      hieu_luc: true,
      het_hieu_luc: false,
      lam_viec_onl: isOnlMethod == "true",
    },
    attributes: ["thu", "lam_viec_onl"],
    include: [
      {
        model: Timeslot,
        as: "Gio_hen",
        required: true,
        where: {
          thoi_diem_bat_dau: {
            [Op.gte]: new Date(startTime),
          },
          thoi_diem_ket_thuc: {
            [Op.lte]: endTime,
          },
          available: true,
        },
        attributes: [
          "id",
          "thoi_diem_bat_dau",
          "thoi_diem_ket_thuc",
          "ngay_lam_viec",
        ],
        order: [["thoi_diem_bat_dau", "ASC"]],
      },
    ],
  });

  if (queryResult.length === 0) {
    return queryResult; // Không tìm thấy ca làm việc nào
  }

  // Format the result as required
  const formattedResult = queryResult
    .map((item) => {
      const gioHenGroupedByDate = item.Gio_hen.reduce((acc, gioHen) => {
        const dateKey = gioHen.ngay_lam_viec;
        if (!acc[dateKey]) {
          acc[dateKey] = [];
        }
        acc[dateKey].push({
          id: gioHen.id,
          thoi_diem_bat_dau: gioHen.thoi_diem_bat_dau,
          thoi_diem_ket_thuc: gioHen.thoi_diem_ket_thuc,
        });
        return acc;
      }, {});

      return Object.keys(gioHenGroupedByDate).map((date) => ({
        thu: item.thu,
        lam_viec_onl: item.lam_viec_onl,
        ngay_lam_viec: date,
        Gio_hen: gioHenGroupedByDate[date],
      }));
    })
    .flat(); // Flatten the array of arrays

  // Sort the formatted result by ngay_lam_viec in ascending order
  const sortedResult = formattedResult.sort(
    (a, b) => new Date(a.ngay_lam_viec) - new Date(b.ngay_lam_viec)
  );

  return sortedResult;
};
